# 7.3
# Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

class Cell:
    def __init__(self, cl):
        self.cl = int(cl)

    def __str__(self):
        return str(self.cl)

    def __add__(self, other):
        return Cell(self.cl + other.cl)

    def __sub__(self, other):
        if self.cl - other.cl > 0:
            return Cell(self.cl - other.cl)
        else:
            return "В первой клетке меньше ячеек"

    def __mul__(self, other):
        return Cell(self.cl * other.cl)

    def __truediv__(self, other):
        return Cell(self.cl // other.cl)

    def make_order(self, count):
        row = ''
        for i in range(int(self.cl / count)):
            row += f'{"*" * count} \\n'
        row += f'{"*" * (self.cl % count)}'
        return row


c1 = Cell(5)
c2 = Cell(10)
print(c1 + c2)
print(c1 - c2)
print(c2 - c1)
print(c1 * c2)
print(c1 / c2)
print(c2.make_order(3))
